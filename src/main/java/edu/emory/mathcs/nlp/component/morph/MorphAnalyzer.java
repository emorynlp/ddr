/**
 * Copyright 2015, Emory University
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package edu.emory.mathcs.nlp.component.morph;

import edu.emory.mathcs.nlp.common.util.StringUtils;
import edu.emory.mathcs.nlp.structure.constituency.CTNode;
import edu.emory.mathcs.nlp.structure.node.AbstractNode;
import edu.emory.mathcs.nlp.structure.util.PTBLib;

/**
 * @author Jinho D. Choi ({@code jinho.choi@emory.edu})
 */
public abstract class MorphAnalyzer
{	
	/**
	 * @param simplifiedWordForm simplified word form generated by {@link StringUtils#toSimplifiedForm(String)}.
	 * @param pos Penn Treebank style part-of-speech tag.
	 * @return the lemmas of the word form given the pos tag.
	 */
	public abstract String lemmatize(String simplifiedWordForm, String pos);
	
	public <N extends AbstractNode<N>>String setLemma(N node)
	{
		node.setLemma(lemmatize(node.getFormSimplified(), node.getSyntacticTag()));
		
		if (node instanceof CTNode && node.isLemma("'s"))
		{
			String lemma = PTBLib.getLemmaOfApostropheS((CTNode)node);
			if (lemma != null) node.setLemma(lemma);
		}
		
		return node.getLemma();
	}
}
